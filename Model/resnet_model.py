# -*- coding: utf-8 -*-
"""Resnet_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dpKv0Yy9NZ27I5cLtx_QcuqB5IKAp1Tf
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import cv2
from PIL import Image
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow import keras
import warnings
warnings.filterwarnings('ignore')

print("All Required Libraries Are Imported.....")

original_cheques= os.listdir('C:\\Users\\prave\\Final_Year_Project\\Dataset\\Training_Data')
print(original_cheques[:5])

fake_cheques = os.listdir('C:\\Users\\prave\\Final_Year_Project\\Dataset\\Testing_Data')
print(fake_cheques[:5])

print('Number of original cheques:', len(original_cheques))
print('Number of fake cheques:', len(fake_cheques))

# create the labels

original_cheques_labes = [1]*110

fake_cheques_labels = [0]*29

print(original_cheques_labes[0:5])

print(fake_cheques_labels[0:5])

print(len(original_cheques_labes))
print(len(fake_cheques_labels))

labels = original_cheques_labes + fake_cheques_labels

print(len(labels))
print(labels[0:5])
print(labels[-5:])

# displaying original cheque image
img = mpimg.imread('C:\\Users\\prave\\Final_Year_Project\\Dataset\\Training_Data\\X_052.jpeg')
a = plt.imshow(img)
# plt.show()

# displaying fake cheque image
img = mpimg.imread('C:\\Users\\prave\\Final_Year_Project\\Dataset\\Testing_Data\\X_013.jpeg')
imgplot = plt.imshow(img)
# plt.show()

# convert images to numpy arrays+

original_cheque_images_path = 'C:\\Users\\prave\\Final_Year_Project\\Dataset\\Training_Data\\'

data = []

for img_file in original_cheques:

  image = Image.open(original_cheque_images_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)



fake_cheques_path = 'C:\\Users\\prave\\Final_Year_Project\\Dataset\\Testing_Data\\'


for img_file in fake_cheques:

  image = Image.open(fake_cheques_path + img_file)
  image = image.resize((128,128))
  image = image.convert('RGB')
  image = np.array(image)
  data.append(image)

type(data)

len(data)

data[0]

type(data[0])

data[0].shape

# converting image list and label list to numpy arrays

X = np.array(data)
Y = np.array(labels)

print(type(X))
print(type(Y))

print(X.shape)
print(Y.shape)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)
print(X.shape, X_train.shape, X_test.shape)

# scaling the data

X_train_scaled = X_train/255

X_test_scaled = X_test/255

X_train_scaled[0]
try: 
  from keras.layers import Dropout, Dense
  from keras import optimizers
  from keras.applications.resnet50 import ResNet50
  restnet = ResNet50(include_top=False, weights='imagenet', input_shape=(128,128,3))
  output = restnet.layers[-1].output
  output = keras.layers.Flatten()(output)

  for layer in restnet.layers:
    layer.trainable = False

  restnet.summary()

  model1 = keras.Sequential()
  model1.add(restnet)
  model1.add(Dense(512, activation='relu', input_dim=(128,128,3)))
  model1.add(Dropout(0.3))
  model1.add(Dense(512, activation='relu'))
  model1.add(Dropout(0.3))
  model1.add(Dense(4, activation='sigmoid'))
  model1.compile(loss='binary_crossentropy',
  optimizer=optimizers.RMSprop(lr=2e-5),
  metrics=['accuracy'])
  model1.summary()

  history = model1.fit(X_train_scaled, Y_train,batch_size=50,epochs=5,verbose=1)

except:
  num_of_classes = 2

  model = keras.Sequential()

  model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(128,128,3)))
  model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))


  model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
  model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

  model.add(keras.layers.Flatten())

  model.add(keras.layers.Dense(128, activation='relu'))
  model.add(keras.layers.Dropout(0.5))

  model.add(keras.layers.Dense(64, activation='relu'))
  model.add(keras.layers.Dropout(0.5))


  model.add(keras.layers.Dense(num_of_classes, activation='sigmoid'))

  # compile the neural network
  model.compile(optimizer='adam',
                loss='sparse_categorical_crossentropy',
                metrics=['accuracy'])
  model.summary()

  # training the neural network
  history = model.fit(X_train_scaled, Y_train, validation_split=0.1, epochs=15)

loss, accuracy = model.evaluate(X_test_scaled, Y_test)
print('Test Accuracy =', accuracy)

h = history
# plot the loss value
plt.plot(h.history['loss'], label='train loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()

# plot the accuracy value
plt.plot(h.history['accuracy'], label='train accuracy')
plt.plot(h.history['val_accuracy'], label='validation accuracy')
plt.legend()
plt.show()

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

#plt.imshow(input_image)
#plt.show()

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 0:

  print('The given cheque is a fake cheque')

else:

  print('The given cheque is a original cheque')

model.save("resnet_model.h5")